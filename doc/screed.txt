=====================================
screed - short read sequence database
=====================================

:Copyright: 2008-2010 Michigan State University
:Authors: Alex Nolley, C. Titus Brown
:Contact: badmit@gmail.com, ctb@msu.edu
:License: BSD

.. contents:

Introduction
============
screed is a database generation and querying package made to be used with gene
sequences generated by Solexa machines, namely the FASTQ format, though FASTA
is supported by default as well. Values
such as sequence name, sequence description and the sequence itself can be
retrieved from these databases.

Getting Going
=============
The following software packages are required to run screed:

* Python 2.4 or newer
* nose (for testing)

Downloading
-----------
You will need git to download a copy from the public git repository:
    git clone git://github.com/acr/screed.git

Installing
-------------------
Assuming you have already downloaded the package, this is how to install::

    $ python setup.py install

To run the optional nosetests type::

    $ nosetests

in the screed/ directory

Quick-Start
===========

Creating a database from the API
--------------------------------
From a python prompt type::

    >>> from screed import seqparse
    >>> seqparse.read_fasta_sequences('../tests/test.fa')

That command just parsed the FASTA file '../tests/test.fa' into a
screed-database named '../tests/test.fa_screed'. The screed database
is independant from the text file it was derived from, so moving, renaming
or deleting the '../tests/test.fa' file will not affect
screed's operation. To create a screed database from a FASTQ file the
syntax is similar::

    >>> seqparse.read_fastq_sequences('../tests/test.fastq')

Creating a database from a script
---------------------------------
To create a screed db from a fastq file at the shell::

    $ ./fqdbm ../tests/test.fastq

Similarly, to create a screed db from a fasta file::

    $ ./fadbm ../tests/test.fa

Reading databases
-----------------
In the python environment, import the screed module from the python
subdirectory and load some databases::

    >>> from screed import screedDB
    >>> fadb = screedDB.screedDB('../tests/test.fa')
    >>> fqdb = screedDB.screedDB('../tests/test.fastq')

The databases act like read-only dictionary objects::

    >>> fadb.keys()
    >>> fqdb.keys()

Each record in the database has certain attributes such as name and sequence
information. If the database was derived from a fastq file, a quality score is
also included. Conversely, fasta-derived databases have a description tag.

To retrieve the names of records in the database::

    >>> names = fadb.keys()

Or, to retrieve sequence information::

    >>> sequences = []
    >>> for key in fqdb:
    ...     record = fqdb[key]
    ...     sequences.append(record.sequence)

Length of the databases are easily found::

    >>> print len(fadb)
    22
    >>> print len(fqdb)
    125

Records can also be retrieved by index, instead of by name::

    >>> fqdb.loadRecordByIndex(5)

Writing Custom Sequence Parsers
===============================
screed is built to be flexible with different types of file sequences.
Included with screed are parsers for handling FASTA and FASTQ sequence file types,
though if you need screed to work with a new file sequence type, all you need to
do is write a new parser.

Error checking in parsing methods
---------------------------------
The existing FASTA/FASTQ parsing functions in seqparse.py contain some error
checking, such as making sure the file can be opened and asserting correct
data is being read. Though screed
doesn't enforce this, it is strongly recommended to include error checking code
in your parser. To remain non-specific to one file sequence type or another,
the underlying screed library can't contain error checking code of this kind.
If errors are not detected by the parsing function, they will be silently included
into the database being built and could cause problems much later when trying to
access the database.

General Parsing Function Format
-------------------------------
This sub-section describes general steps for preparing and using screed with a
custom sequence parser. Though they don't have to be, future sequence parsers
should be located in the seqparse.py file for convenience.
These steps will be described in the context of working from the python shell.

1. First, import the screedDB file:

   >>> import screedDB

2. Next, the database fields must be specified. The fields are what tells screed the
   names and order of the data fields inside each record. For instance, lets say our
   new sequence has types 'name', 'bar', and 'baz', all text. The fields object will
   be:

   >>> fields = ('name', 'bar', 'baz')

   Now the database dictionary object can be created with:

   >>> db = screedDB.screedDB(filepath, fields)

   where 'filepath' is the path to the name of the file to be used by the screed
   database.
   Note the order in fields: 'name', 'bar', then 'baz'. This is the order screed
   will expect when receiving a new record to store and it is the order screed
   will return when a record is queried.

3. Finally, its time to add records to the database. After collecting the 'name', 'bar',
   and 'baz' attributes, add data to the dict-like database object:

   >>> db[name] = (name, bar, baz)

   After reading all the records into the database, close it and you're done:

   >>> db.close()
..
    Local Variables:
    mode: rst
    mode: outline-minor
    End:

